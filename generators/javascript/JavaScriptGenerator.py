from enum import Enum
from generators.Descriptor import Descriptor

class TypeDescriptorType(Enum):
    Byte = 'byte'
    Struct = 'struct'
    Enum = 'enum'
    Custom = 'custom'


class TypeDescriptorDisposition(Enum):
    Inline = 'inline'
    Const = 'const'


def indent(code, n_indents=1):
    return ' ' * 4 * n_indents + code


class JavaScriptMethodGenerator:
    def __init__(self, signature, params=[]):
        self.method_output = ['{} = ({}) => {{'.format(signature, ', '.join(params))]

    def add_instructions(self, instructions):
        for instruction in instructions:
            self.method_output.append(indent(instruction))

    def get_method(self):
        return self.method_output + ['}']


class JavaScriptClassGenerator:
    @staticmethod
    def get_generated_class_signature(signature):
        return '{}Buffer'.format(signature)

    @staticmethod
    def get_generated_getter_signature(attribute):
        return 'get{}'.format(attribute.capitalize())

    @staticmethod
    def get_generated_setter_signature(attribute):
        return 'set{}'.format(attribute.capitalize())

    def __init__(self, signature):
        self.class_signature = JavaScriptClassGenerator.get_generated_class_signature(signature)
        self.class_output = ['export class {} {{'.format(self.class_signature)]

    def add_constructor(self, initial_values, params=[]):
        new_constructor = [indent('constructor({}) {{'.format(', '.join(params)))]
        for attribute, value in initial_values.items():
            new_constructor += [indent('this.{} = {}'.format(attribute, value), 2)]
        self.class_output += new_constructor + [indent('}'), '']

    def _add_getter(self, attribute):
        new_getter = JavaScriptMethodGenerator(JavaScriptClassGenerator.get_generated_getter_signature(attribute), [attribute])
        new_getter.add_instructions(['return this.{0}'.format(attribute)])
        self.add_method(new_getter)

    def _add_setter(self, attribute):
        new_setter = JavaScriptMethodGenerator(JavaScriptClassGenerator.get_generated_setter_signature(attribute), [attribute])
        new_setter.add_instructions(['this.{0} = {0}'.format(attribute)])
        self.add_method(new_setter)

    def add_getter_setter(self, attribute):
        self._add_getter(attribute)
        self._add_setter(attribute)

    def add_method(self, method):
        self.class_output += [indent(line) for line in method.get_method()] + ['']

    def get_class(self):
        return self.class_output + ['}']


class JavaScriptGenerator:
    def __init__(self, schema):
        self.schema = schema

    def __iter__(self):
        self.generated = False
        return self

    def __next__(self):
        if self.generated:
            raise StopIteration

        code = self.generate()
        self.generated = True
        return Descriptor('catbuffer_generated_output.js', code)

    def _generate_load_from_binary_method(self):
        load_from_binary_method = JavaScriptMethodGenerator('loadFromBinary', ['binary'])
        load_from_binary_method.add_instructions(['// TODO: To be initialized'])
        load_from_binary_method.add_instructions(['return new {}()'.format(self.new_class.class_signature)])
        self.new_class.add_method(load_from_binary_method)

    def _generate_serialize_method(self):
        serialize_method = JavaScriptMethodGenerator('serialize')
        serialize_method.add_instructions(['// TODO: Missing logic'])
        serialize_method.add_instructions(['return new ArrayBuffer()'])
        self.new_class.add_method(serialize_method)

    def _generate_attributes(self, attributes):
        for attribute in attributes:
            if 'disposition' in attribute:
                if attribute['disposition'] == TypeDescriptorDisposition.Inline.value:
                    self._generate_attributes(self.schema[attribute['type']]['layout'])
                elif attribute['disposition'] == TypeDescriptorDisposition.Const.value:
                    self.constructor_initial_values[attribute['name']] = attribute['value']
                    self.new_class.add_getter_setter(attribute['name'])
            else:
                self.new_class.add_getter_setter(attribute['name'])

    def _generate_struct(self, type_descriptor, struct):
        self.new_class = JavaScriptClassGenerator(type_descriptor)
        self.constructor_initial_values = {}
        self._generate_attributes(struct['layout'])
        if self.constructor_initial_values:
            self.new_class.add_constructor(self.constructor_initial_values)
        self._generate_load_from_binary_method()
        self._generate_serialize_method()
        return self.new_class.get_class()

    def generate(self):
        new_file = ['/*** File automatically generated by Catbuffer ***/', '']

        for type_descriptor, value in self.schema.items():
            if value['type'] == TypeDescriptorType.Byte.value:
                # Typeless environment, values will be directly assigned
                pass
            elif value['type'] == TypeDescriptorType.Enum.value:
                # Using the constant directly, so enum definition unneeded
                pass
            elif value['type'] == TypeDescriptorType.Struct.value:
                new_file += self._generate_struct(type_descriptor, value) + ['']

        return new_file
